The keyboard shortcut Ctrl+K enables you to quickly invoke the Commit Changes dialog.
This dialog shows all modifications in project, gives summary information of file 
status and suggests improvements before check-in.
-------------------------------------------------------------------------------
It is very easy to toggle between find and replace functionality.
When you perform search and replace in a file, pressing Ctrl+F shows the search pane.
Pressing Ctrl+R adds field, where you can type the replace string.
While in the Find in Path dialog, you can switch to replace by pressing Ctrl+Shift+R.
Same way, press Ctrl+Shift+F to hide the Replace with field, and switch to mere search.
-------------------------------------------------------------------------------
You may easily override methods of the base class by pressing Ctrl+O (Code | Override Methods).
To implement methods of the interfaces that the current class implements (or of the abstract
base class), use Ctrl+I (Code | Implement methods).
-------------------------------------------------------------------------------
The SmartType code completion greatly helps to find methods and variables that are suitable
in the current context, by analyzing the expected type of the whole expression. So doing,
Android Studio pinpoints the top five most suitable results and highlights them on the blue
background. For example, type

   Calendar now = new GregorianCalendar(T)

and press Ctrl+Shift+Space:

The SmartType completion also works after the return keyword, in an assignment, in an argument
 list of a method call and other places.
-------------------------------------------------------------------------------
When using Code Completion, you can accept the currently highlighted selection in the popup list
with Tab key. Unlike accepting with the Enter key, the selected name will overwrite the rest of the
name to the right of the caret. This can be especially useful for replacing one method or variable
name with another.
-------------------------------------------------------------------------------
Using Alt+Insert (Code | Generate) in the editor, you can easily generate getter
and setter methods for any fields of your class.
-------------------------------------------------------------------------------
Use the Ctrl+Shift+V shortcut to choose and insert recent clipboard contents into the text.
-------------------------------------------------------------------------------
To see the inheritance hierarchy for a selected class, press Ctrl+H (Navigate | Type Hierarchy). 
You can also invoke the hierarchy view right from the editor to see the hierarchy for the currently 
edited class.
-------------------------------------------------------------------------------
To easily evaluate the value of any expression while debugging the program, 
select its text in the editor (you may press a Ctrl+W a few times to efficiently 
perform this operation) and press Alt+F8.
-------------------------------------------------------------------------------
The Escape key in any tool window moves the focus to the editor.
Shift+Escape moves the focus to the editor and also hides the current (or last active) tool window.
The F12 key moves the focus from the editor to the last focused tool window.
-------------------------------------------------------------------------------
You can avoid escaping backslashes in your regular expressions. Start typing a regular expression,
 then press Alt+Enter and choose Edit RegExp. The regular expression opens in a separate tab in 
the editor, where you can type backslashes as is. All changes are synchronized with the original 
regular expression, and escapes are presented automatically. When ready, just press Escape to close 
the regular expression editor.
-------------------------------------------------------------------------------
Use Basic Completion (Ctrl+Space) for completing words in text and comments in files of many different types.
All the words from the current file that start with the typed prefix will appear in the lookup list.
-------------------------------------------------------------------------------
The shortcuts such as Ctrl+Q (View | Quick Documentation), Ctrl+P (View | Parameter Info), 
Ctrl+B (Navigate | Declaration) and others can be used not only in the editor but in the 
code completion popup list as well.
-------------------------------------------------------------------------------
To debug services, insert this line of code in the onCreate of the service:

android.os.Debug.waitForDebugger(); // wait for the debugger to attach

Then attach the debugger to the service. In order to locate the service process,
be sure to name the service process in AndroidManifest.xml like so:

        <service
            android:name=".app.RemoteService"
            android:process=":remote" />
-------------------------------------------------------------------------------
When using Code Completion, you can accept the currently highlighted selection in the popup 
list with the period character (.), comma (,), semicolon (;), space and other characters.
The selected name is automatically entered in the editor followed by the entered character.
-------------------------------------------------------------------------------
Use: long threadID = Thread.currentThread().getId(); to get thread id.
-------------------------------------------------------------------------------
The shortcut Ctrl-E pops up a list of the most recent files edited as well as the
a way to select the available tool windows
-------------------------------------------------------------------------------
To convert List<String> languages to an array of Strings:

   String[] languageStrings = languages.toArray(new String[languages.size()]);

-------------------------------------------------------------------------------
Use Basic Completion (Ctrl+Space) within HTML, CSS and other files, for completing image file names.
-------------------------------------------------------------------------------
Use Ctrl+Shift+I (View | Quick Definition), to quickly review definition or content of the symbol 
at caret, without the need to open it in a new editor tab.
-------------------------------------------------------------------------------
The Quick Definition Viewer (Ctrl+Shift+I) can also be used for items in lookup lists that appear 
on code completion and class/file/symbol navigaton commands.
-------------------------------------------------------------------------------
Navigation bar is a quick alternative to the Project view.
Use Alt+Home keyboard shortcut to show the navigation bar, 
and arrow keys to locate the necessary files or folders.
-------------------------------------------------------------------------------
You can bring forward the list of all usages of a class, method or variable across 
the whole project, and quickly jump to the selected usage. To do that, place the 
caret at the symbol's name or at its usage in code and press:

 Ctrl+Alt+7 (Edit | Find | Show Usages in the main menu)

 scroll the list and click the desired usage.
-------------------------------------------------------------------------------
To quickly find a menu command or toolbar action, you do not need to look through 
the menus. Just press Ctrl+Shift+A (Help | Find Action on the main menu) and 
start typing the name of the action. Choose the desired action from the suggestion list.
-------------------------------------------------------------------------------
Example code for scaling dp value to int pixels:

protected void onDraw(Canvas canvas) {
   final float scale = getResources().getDisplayMetrics().density;
   int x = (int) (10 * scale);
   int y = (int) (10 * scale);
   int width = (int) (300 * scale);
   int height = (int) (50 * scale);

   for (Drawable dr : mDrawables) {
       dr.setBounds(x, y, x + width, y + height);
       dr.draw(canvas);
       y += height + (int) (5 * scale);
   }
}
-------------------------------------------------------------------------------
You can create code constructs using statement completion. 
Start typing a method declaration or a statement, and 
press Ctrl+Shift+Enter after the opening parenthesis. 
The braces are created, with the caret placed inside:
-------------------------------------------------------------------------------
You can view all methods of the implemented interfaces in a class, 
if you place the caret at the implements keyword in the class declaration, 
press Ctrl+Shift+F7, and select the desired interface from the list.
-------------------------------------------------------------------------------
You can view all statements within the method where certain exceptions can be 
caught. Just place the caret at the throws keyword in a method declaration, 
press Ctrl+Shift+F7 and select the desired exception class from the list. 
This will also work for try and catch.
-------------------------------------------------------------------------------
Postfix code completion is applied "from right to left" and lets you avoid 
backward caret jumps when coding. After the code fragment that you want to change, 
type a dot (.), optionally press Ctrl+J and select the desired option.
-------------------------------------------------------------------------------
When using Code Completion, you can accept the currently highlighted selection 
in the popup list with the Ctrl+Shift+Enter, Android Studio will not just insert
the selected string, but also will do its best to turn current code construct 
into syntactically correct one (balance parentheses, add missing braces and 
semicolons, etc.)
-------------------------------------------------------------------------------
            <root type="simple" url="file://$USER_HOME$/Development/sdk/docs/reference" />
            <root type="simple" url="http://developer.android.com/reference/" />
~/.AndroidStudio/config/options/jdk.table.xml
-------------------------------------------------------------------------------
Vim provides many ways to move the cursor. Becoming familiar with them leads to more effective text editing.

h   move one character left
j   move one row down
k   move one row up
l   move one character right
w   move to beginning of next word
b   move to previous beginning of word
e   move to end of word
W   move to beginning of next word after a whitespace
B   move to beginning of previous word before a whitespace
E   move to end of word before a whitespace

All the above movements can be preceded by a count; e.g. 4j moves down 4 lines.

0   move to beginning of line
$   move to end of line
_   move to first non-blank character of the line
g_  move to last non-blank character of the line

gg  move to first line
G   move to last line

ngg move to n'th line of file (n is a number; 12gg moves to line 12)
nG  move to n'th line of file (n is a number; 12G moves to line 12)

H   move to top of screen
M   move to middle of screen
L   move to bottom of screen

zz  scroll the line with the cursor to the center of the screen
zt  scroll the line with the cursor to the top
zb  scroll the line with the cursor to the bottom

Ctrl-D  move half-page down
Ctrl-U  move half-page up
Ctrl-B  page up
Ctrl-F  page down
Ctrl-O  jump to last (older) cursor position
Ctrl-I  jump to next cursor position (after Ctrl-O)
Ctrl-Y  move view pane up
Ctrl-E  move view pane down

n   next matching search pattern
N   previous matching search pattern
*   next whole word under cursor
#   previous whole word under cursor
g*  next matching search (not whole word) pattern under cursor
g#  previous matching search (not whole word) pattern under cursor
gd  go to definition/first occurrence of the word under cursor

%   jump to matching bracket { } [ ] ( )

fX  to next 'X' after cursor, in the same line (X is any character)
FX  to previous 'X' before cursor (f and F put the cursor on X)
tX  til next 'X' (similar to above, but cursor is before X)
TX  til previous 'X'
;   repeat above, in same direction
,   repeat above, in reverse direction

See :help {command} (for example, :help g_) for all of the above if you want more details.
-------------------------------------------------------------------------------
In order to access http instead of https from a WebView your need to add this file:

xml/network_security_config.xml:

<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="true">
        <domain includeSubdomains="true">localhost</domain>
    </domain-config>
</network-security-config>

and add this attribute to AndroidManifest.xml in the application element:

         android:networkSecurityConfig="@xml/network_security_config"
-------------------------------------------------------------------------------
Best way to add permission requests for Marshmallow and beyond:

    /**
     * Permissions we need to ask for.
     */
    public String[] permissions = {
            Manifest.permission.READ_CONTACTS,
    };

    /**
     * Called when the main window associated with the activity has been attached to the window
     * manager. First we call our super's implementation of {@code onAttachedToWindow}, then we
     * ask the user for the required permissions by calling {@code requestPermissions}.
     */
    @Override
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        ActivityCompat.requestPermissions(this, permissions, 1);
    }

for when using ActivityCompat, and for Activity:

    /**
     * Called when the main window associated with the activity has been attached to the window
     * manager. First we call our super's implementation of {@code onAttachedToWindow}, then we
     * ask the user for the required permissions by calling {@code requestPermissions}.
     */
    @Override
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        this.requestPermissions(permissions, 1);
    }
-------------------------------------------------------------------------------
To read an mbox format file do:

     user@host:~/News> <mbox_file formail -s perl -e 'system "cat >folder/$ENV{FILENO}"'

then in emacs gnus group, enter: GD
then open the directory News/folder
-------------------------------------------------------------------------------
Use *&#47;*  in javadoc for */*
-------------------------------------------------------------------------------
How to check if current thread is not main thread:

Looper.myLooper() == Looper.getMainLooper()

if this returns true, then you're on the UI thread!
-------------------------------------------------------------------------------
TODO: Need to experiment with let, run, with, apply, and also.
See: https://kotlinlang.org/docs/reference/scope-functions.html

To help you choose the right scope function for your purpose, we provide the table of key differences between them.

Function  Object reference  Return value   Is extension function
let       it                Lambda result  Yes
run       this              Lambda result  Yes
run       -                 Lambda result  No: called without the context object
with      this              Lambda result  No: takes the context object as an argument.
apply     this              Context object Yes
also      it                Context object Yes
-------------------------------------------------------------------------------
Here is a short guide for choosing scope functions depending on the intended purpose:

    Executing a lambda on non-null objects: let
    Introducing an expression as a variable in local scope: let
    Object configuration: apply
    Object configuration and computing the result: run
    Running statements where an expression is required: non-extension run
    Additional effects: also
    Grouping function calls on an object: with
-------------------------------------------------------------------------------

